import asyncio
import re
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from datetime import datetime, timedelta
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove

API_TOKEN = '8134559498:AAEer20huQX3RMS2CcLvXmTwllxsHwAG3S4'
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_data = {}
reminders = {}


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class ReminderStates:
    WAITING_TEXT = 1
    WAITING_TIME = 2


# –ü–∞—Ä—Å–∏–Ω–≥ —Ä—É—Å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def parse_russian_time(text):
    text = text.lower().strip()

    # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    if ':' in text:
        time_match = re.search(r'(\d{1,2}):(\d{2})', text)
        if time_match:
            hours, minutes = map(int, time_match.groups())
            now = datetime.now()
            reminder_time = now.replace(hour=hours, minute=minutes, second=0)
            if reminder_time < now:
                reminder_time += timedelta(days=1)
            return reminder_time, '–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ'

    # –†–∞–∑–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    patterns = {
        '–º–∏–Ω': 'm',
        '—á–∞—Å': 'h',
        '–¥–µ–Ω—å': 'd'
    }

    for ru, en in patterns.items():
        if ru in text:
            num = int(re.search(r'\d+', text).group())
            if en == 'm':
                return timedelta(minutes=num), f"–∫–∞–∂–¥—ã–µ {num} –º–∏–Ω"
            elif en == 'h':
                return timedelta(hours=num), f"–∫–∞–∂–¥—ã–µ {num} —á–∞—Å"
            elif en == 'd':
                return timedelta(days=num), f"–∫–∞–∂–¥—ã–µ {num} –¥–Ω–µ–π"

    # –†–∞–∑–±–æ—Ä "—á–µ—Ä–µ–∑ X –≤—Ä–µ–º—è"
    if '—á–µ—Ä–µ–∑' in text:
        num = int(re.search(r'\d+', text).group())
        if '–º–∏–Ω' in text:
            return timedelta(minutes=num), f"—á–µ—Ä–µ–∑ {num} –º–∏–Ω"
        elif '—á–∞—Å' in text:
            return timedelta(hours=num), f"—á–µ—Ä–µ–∑ {num} —á–∞—Å"
        elif '–¥–µ–Ω—å' in text or '–¥–Ω—è' in text or '–¥–Ω–µ–π' in text:
            return timedelta(days=num), f"—á–µ—Ä–µ–∑ {num} –¥–Ω–µ–π"

    return None, None


@router.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.reply(
        "‚è∞ –ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞\n"
        "‚Ä¢ /new - –ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "‚Ä¢ /list - –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ /del - –£–¥–∞–ª–∏—Ç—å",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(Command("new"))
async def new_reminder(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {'state': ReminderStates.WAITING_TEXT}
    await message.reply(
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(F.text,
                lambda message: user_data.get(message.from_user.id, {}).get('state') == ReminderStates.WAITING_TEXT)
async def get_reminder_text(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {
        'state': ReminderStates.WAITING_TIME,
        'text': message.text
    }
    await message.reply(
        "‚è± –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è:\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 14:30 (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ)\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n"
        "‚Ä¢ –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(F.text,
                lambda message: user_data.get(message.from_user.id, {}).get('state') == ReminderStates.WAITING_TIME)
async def get_reminder_time(message: types.Message):
    user_id = message.from_user.id
    text = user_data[user_id]['text']
    time_text = message.text

    delta, freq = parse_russian_time(time_text)
    if not delta:
        await message.reply(
            "–ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è?!. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 14:30\n"
            "‚Ä¢ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n"
            "‚Ä¢ –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    if user_id not in reminders:
        reminders[user_id] = []

    is_one_time = freq == '–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ'
    reminder = {
        'text': text,
        'delta': delta,
        'freq': freq,
        'next_time': datetime.now() + delta if is_one_time else datetime.now()
    }

    reminders[user_id].append(reminder)
    del user_data[user_id]

    await message.reply(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
        f"üìù –¢–µ–∫—Å—Ç: {text}\n"
        f"‚è∞ –ö–æ–≥–¥–∞: {freq}",
        reply_markup=ReplyKeyboardRemove()
    )

    if len(reminders[user_id]) == 1:
        asyncio.create_task(check_reminders(user_id))


@router.message(Command("list"))
async def show_reminders(message: types.Message):
    user_id = message.from_user.id
    if not reminders.get(user_id):
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        return

    res = ["–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"]
    for i, r in enumerate(reminders[user_id], 1):
        res.append(f"{i}. {r['text']} ({r['freq']})")

    await message.reply("\n".join(res))


@router.message(Command("del"))
async def delete_reminder(message: types.Message):
    user_id = message.from_user.id
    if not reminders.get(user_id):
        await message.reply("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    kb = InlineKeyboardBuilder()
    for i, r in enumerate(reminders[user_id]):
        kb.button(text=f"{i + 1}. {r['text'][:15]}...", callback_data=f"del_{i}")
    kb.adjust(2)

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb.as_markup())


@router.callback_query(lambda c: c.data.startswith('del_'))
async def process_delete(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    idx = int(callback.data.split('_')[1])

    try:
        deleted = reminders[user_id].pop(idx)
        await callback.answer(f"–£–¥–∞–ª–µ–Ω–æ: {deleted['text']}")
        await callback.message.delete()
    except:
        await callback.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")


async def check_reminders(user_id):
    while user_id in reminders and reminders[user_id]:
        now = datetime.now()
        for r in reminders[user_id][:]:
            if now >= r['next_time']:
                await bot.send_message(user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {r['text']}")

                if r['freq'] == '–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ':
                    reminders[user_id].remove(r)
                else:
                    r['next_time'] = now + r['delta']

        await asyncio.sleep(30)


dp.include_router(router)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
